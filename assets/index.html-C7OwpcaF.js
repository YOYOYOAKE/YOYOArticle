import{_ as c,c as g,d as i,b as s,a as h,w as e,e as t,r as p,o as y}from"./app-BvfsiuvN.js";const v={},u={class:"vp-file-tree"},f={class:"code-block-title","data-title":"app/page.tsx"},m={class:"code-block-title-bar"},b={class:"title"},A={class:"code-block-title","data-title":"app/layout.tsx"},D={class:"code-block-title-bar"},x={class:"title"},B={class:"code-block-title","data-title":"app/Button.tsx"},E={class:"code-block-title-bar"},_={class:"title"},F={class:"vp-file-tree"},C={class:"vp-file-tree"},j={class:"vp-file-tree"},N={class:"vp-file-tree"},R={class:"vp-file-tree"},P={class:"vp-file-tree"};function q(T,l){const n=p("VPIcon"),r=p("CodeTabs"),a=p("FileTreeNode"),o=p("VPCodeTree");return y(),g("div",null,[l[10]||(l[10]=i("p",null,"我们注意到 React 官网中更加推荐 Next.js 的方式编写 React 应用。Next.js 的开发体验完全不同于 Vite、Webpack 等静态打包器，独特的路由和服务端渲染机制让其无愧于全栈框架之名。",-1)),l[11]||(l[11]=i("h2",{id:"_1-next-js-项目",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_1-next-js-项目"},[i("span",null,"1 Next.js 项目")])],-1)),l[12]||(l[12]=i("h3",{id:"_1-1-创建一个-next-js-项目",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_1-1-创建一个-next-js-项目"},[i("span",null,"1.1 创建一个 Next.js 项目")])],-1)),l[13]||(l[13]=i("p",null,"使用你喜欢的包管理器初始化一个 Next.js 仓库。",-1)),s(r,{id:"12",data:[{id:"npm"},{id:"pnpm"}]},{title0:e(({value:k,isActive:d})=>[s(n,{provider:"iconify",name:"logos:npm-icon"}),l[0]||(l[0]=i("span",null,"npm",-1))]),title1:e(({value:k,isActive:d})=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-light-pnpm"}),l[1]||(l[1]=i("span",null,"pnpm",-1))]),tab0:e(({value:k,isActive:d})=>[...l[2]||(l[2]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-bash"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"npx"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," create-next-app@latest")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])]),tab1:e(({value:k,isActive:d})=>[...l[3]||(l[3]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-bash"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"pnpx"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," create-next-app@latest")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])]),_:1}),l[14]||(l[14]=h(`<p>按照你的要求选取依赖：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-text"><span class="line"><span>❯ pnpx create-next-app@latest</span></span>
<span class="line"><span>√ What is your project named? ... nextjsdemo</span></span>
<span class="line"><span>√ Would you like to use TypeScript? ... No / Yes</span></span>
<span class="line"><span>√ Would you like to use ESLint? ... No / Yes</span></span>
<span class="line"><span>√ Would you like to use Tailwind CSS? ... No / Yes</span></span>
<span class="line"><span>√ Would you like your code inside a \`src/\` directory? ... No / Yes</span></span>
<span class="line"><span>√ Would you like to use App Router? (recommended) ... No / Yes</span></span>
<span class="line"><span>√ Would you like to use Turbopack for \`next dev\`? ... No / Yes</span></span>
<span class="line"><span>√ Would you like to customize the import alias (\`@/*\` by default)? ... No / Yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-next-js-项目结构" tabindex="-1"><a class="header-anchor" href="#_1-2-next-js-项目结构"><span>1.2 Next.js 项目结构</span></a></h3><p>进入项目后，你将看到以下文件结构：</p>`,4)),i("div",u,[s(a,{expanded:"",type:"folder",filename:"node_modules",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-light-node"})]),default:e(()=>[s(a,{type:"file",filename:"...",level:1})]),_:1}),s(a,{expanded:"",type:"folder",filename:"public",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-public"})]),default:e(()=>[s(a,{type:"file",filename:"...",level:1})]),_:1}),s(a,{expanded:"",type:"folder",filename:"src",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-src"})]),default:e(()=>[s(a,{expanded:"",type:"folder",filename:"app",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"...",level:2})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1}),s(a,{type:"file",filename:".gitignore",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-git"})]),_:1}),s(a,{type:"file",filename:"eslint.config.mjs",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-js"})]),_:1}),s(a,{type:"file",filename:"next-env.d.ts",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-typescript"})]),_:1}),s(a,{type:"file",filename:"next-config.ts",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-typescript"})]),_:1}),s(a,{type:"file",filename:"package.json",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-node"})]),_:1}),s(a,{type:"file",filename:"pnpm-lock.yaml",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-light-pnpm"})]),_:1}),s(a,{type:"file",filename:"postcss.config.mjs",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-js"})]),_:1}),s(a,{type:"file",filename:"README.md",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"flat-color-icons:info"})]),_:1}),s(a,{type:"file",filename:"tsconfig.json",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-tsconfig"})]),_:1})]),l[15]||(l[15]=h(`<p>同样的，我们主要关注<code>src</code>文件夹。所有的源代码文件都置于此处。Next.js 默认提供了<code>layout.tsx</code>和<code>page.tsx</code>的示例。<code>layout.tsx</code>和<code>page.tsx</code>相当于 Next.js 中的“保留字”，它们有着特殊的含义。</p><p>执行<code>pnpm dev</code>即可启动开发服务器。</p><h3 id="_1-3-page-tsx" tabindex="-1"><a class="header-anchor" href="#_1-3-page-tsx"><span>1.3 <code>page.tsx</code></span></a></h3><p><code>page.tsx</code>是页面入口，本质上是一个 React 组件。一个最简单的<code>page.tsx</code>可以是这样的：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Home</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Hello Next.js!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next.js 只会选择名为<code>page</code>的文件作为路由，而其他文件则会被当做普通组件。</p>`,6)),s(o,{title:"Next.js APP","entry-file":"app/page.tsx",height:"400px"},{"file-tree":e(()=>[s(a,{filename:"app",level:1,type:"folder",expanded:""},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{filename:"page.tsx",level:2,type:"file",expanded:"",filepath:"app/page.tsx"},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{filename:"layout.tsx",level:2,type:"file",expanded:"",filepath:"app/layout.tsx"},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{filename:"Button.tsx",level:2,type:"file",expanded:"",filepath:"app/Button.tsx"},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1})]),_:1})]),default:e(()=>[i("div",f,[i("div",m,[i("span",b,[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"}),l[4]||(l[4]=t("app/page.tsx",-1))])]),l[5]||(l[5]=i("div",{class:"language-tsx line-numbers-mode","data-highlighter":"shiki","data-ext":"tsx",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-tsx"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"import"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," Button"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," from"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"./Button"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"')]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"export"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," default"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," function"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Home"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"  return"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," (")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    <>")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      <"),i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"Button"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," />")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      <"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"div"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"Hello Next.js!"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"</"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"div"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    </>")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"  )")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1))]),i("div",A,[i("div",D,[i("span",x,[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"}),l[6]||(l[6]=t("app/layout.tsx",-1))])]),l[7]||(l[7]=i("div",{class:"language-tsx line-numbers-mode","data-highlighter":"shiki","data-ext":"tsx",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-tsx"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"export"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," default"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," function"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," RootLayout"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"({")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"  children"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},",")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}: "),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}},"Readonly"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"<{")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"  children"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},": "),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}},"React"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}},"ReactNode")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}>)"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"  return"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," (")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    <"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"html"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," lang"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"="),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"zh-cn"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"      <"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"body"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">{"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"children"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}</"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"body"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    </"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"html"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"  )")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1))]),i("div",B,[i("div",E,[i("span",_,[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"}),l[8]||(l[8]=t("app/Button.tsx",-1))])]),l[9]||(l[9]=i("div",{class:"language-tsx line-numbers-mode","data-highlighter":"shiki","data-ext":"tsx",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-tsx"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"use client"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"')]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"export"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," default"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," function"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Button"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"  const"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," handleClick"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," =>"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"    alert"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Button clicked!"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"  }")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"  return"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," <"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"button"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," onClick"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"={"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"handleClick"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}>"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"Click Me"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"</"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"button"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},">")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1))])]),_:1}),l[16]||(l[16]=h(`<p>你可能已经注意到在<code>Button.tsx</code>中出现了<code>&quot;use client&quot;</code>一行代码，这是因为在 Next.js 13+ 的 App Router 中，组件默认是服务器组件（Server Component），而服务器组件不能包含客户端交互逻辑（如事件处理器）。要解决这个问题，你需要将组件转换为客户端组件，在文件顶部添加 &quot;use client&quot; 指令。这其中的原因我们后面再讲。</p><h3 id="_1-4-layout-tsx" tabindex="-1"><a class="header-anchor" href="#_1-4-layout-tsx"><span>1.4 <code>layout.tsx</code></span></a></h3><p><code>layout.tsx</code>管理页面的布局，使得不同页面之间共享一致的 UI，例如顶栏、底栏、导航栏、侧边栏等。</p><p>一个最简单的<code>layout.tsx</code>是这样的：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RootLayout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Readonly</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">React</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ReactNode</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">zh-cn</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>body</code>元素中配置布局，例如：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RootLayout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Readonly</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">React</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ReactNode</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">zh-cn</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">SideBar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Footer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由"><span>2 路由</span></a></h2><p>Next.js 拥有 Pages Router 和 App Router 两套完全独立的路由系统。最新技术中推荐使用 App Router，因此 Pages Router 这里不做阐述。</p><h3 id="_2-1-app-router-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-app-router-基本使用"><span>2.1 App Router 基本使用</span></a></h3><p>App Router 基于文件结构自动生成路由，而无需配置繁琐的路由表。例如这样一个文件结构：</p>`,11)),i("div",F,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1})]),_:1})]),l[17]||(l[17]=i("p",null,[t("这使得"),i("code",null,"app/page.tsx"),t("成为我们的主页，浏览器访问"),i("code",null,"https://localhost:3000/"),t("即可。但如果我想添加一个关于页面该如何做？Next.js 的 App Router 提供了一种优雅的解决方案：")],-1)),i("div",C,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{expanded:"",type:"folder",filename:"about",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"page.tsx",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"...",level:2})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1})]),l[18]||(l[18]=h("<p>是的，在 App Router 的帮助下，我们访问<code>https://localhost:3000/about</code>即可到达<code>app/about/page.tsx</code>，免去了配置路由表的麻烦。也就是说，<code>page.tsx</code>充当了<code>index.html</code>或者<code>main.ts</code>的作用。</p><p>而如果要有一个<code>https://localhost:3000/about/personal/</code>的页面，只需要再创建新的文件夹即可。</p>",2)),i("div",j,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{expanded:"",type:"folder",filename:"about",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"page.tsx",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{expanded:"",type:"folder",filename:"personal",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"page.tsx",level:3},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"...",level:3})]),_:1}),s(a,{type:"file",filename:"...",level:2})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1})]),l[19]||(l[19]=i("h3",{id:"_2-2-动态路由",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_2-2-动态路由"},[i("span",null,"2.2 动态路由")])],-1)),l[20]||(l[20]=i("p",null,[t("对于非静态页面，往往要从服务器中取得实时数据。例如商品 ID，我们期望访问如下页面"),i("code",null,"https://localhost:3000/goods/{good_id}"),t("即可访问"),i("code",null,"good_id"),t("对应的商品。如果商品有成百上千，我们必不可能硬编码所有的商品页面。在使用路由表配置路由时我们可以使用动态路由动态获取，而 App Router 中，你可以这样做：")],-1)),i("div",N,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{expanded:"",type:"folder",filename:"goods",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{expanded:"",type:"folder",filename:"[good_id]",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"page.tsx",level:3},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1})]),_:1})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1})]),l[21]||(l[21]=h(`<p>这样当我们访问<code>https://localhost:3000/goods/123</code>时，App Router 将提供<code>[good_id]</code>中的<code>page.tsx</code>文件，而在页面内部我们可以捕获<code>good_id</code>作为参数，我们可以利用这个参数做非常多的事情。</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }: { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">good_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> } })</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">商品详情页</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">这里是商品</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">good_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">的详细信息。</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-服务端渲染" tabindex="-1"><a class="header-anchor" href="#_3-服务端渲染"><span>3 服务端渲染</span></a></h2><p>在 Next.js 中，主要有两种类型的组件：服务器组件和客户端组件。Next.js 默认将组件设置为服务器组件。</p><p>服务器组件会在服务器上渲染，并向客户端发送渲染完成的静态 HTML 文件。服务器组件对于非交互内容是非常理想的，例如图片展示、文章展示等。</p><p>而需要按钮点击、文本输入等交互，或者需要管理状态时，我们就可以使用客户端组件。需要注意的是，仅在必要情况下使用客户端组件。要显式声明一个客户端组件，只需要在 TSX 文件第一行使用<code>&quot;use client&quot;</code>即可。</p><table><thead><tr><th style="text-align:center;">场景</th><th style="text-align:center;">服务端组件</th><th style="text-align:center;">客户端组件</th></tr></thead><tbody><tr><td style="text-align:center;">获取数据</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">直接访问后端资源</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">涉及敏感数据（Access Key、Token 等）</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">减少客户端体积</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">交互与事件监听</td><td style="text-align:center;">❌</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:center;">状态、生命周期、副作用（<code>useState()\`\`useReducer()\`\`useEffect()</code>等）</td><td style="text-align:center;">❌</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:center;">浏览器 API</td><td style="text-align:center;">❌</td><td style="text-align:center;">✅</td></tr></tbody></table><h2 id="_4-api-routes" tabindex="-1"><a class="header-anchor" href="#_4-api-routes"><span>4 API Routes</span></a></h2><p>API Routes 是 Next.js 全栈能力的最直接体现。借助 Next.js，我们可以在 App Router 中构建 API 端点，使得 Next.js 应用更加容易处理后端逻辑。</p><h3 id="_4-1-api-routes-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-1-api-routes-基本使用"><span>4.1 API Routes 基本使用</span></a></h3><p>在<code>app</code>目录中，创建一个<code>api</code>文件夹用于 API 的路由。和页面的路由一样，API 的路由也基于文件结构生成：</p>`,11)),i("div",R,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{type:"file",filename:"layout.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{type:"file",filename:"page.tsx",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-reactts"})]),_:1}),s(a,{expanded:"",type:"folder",filename:"api",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-api"})]),default:e(()=>[s(a,{expanded:"",type:"folder",filename:"getData",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"router.ts",level:3},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-typescript"})]),_:1})]),_:1}),s(a,{type:"file",filename:"...",level:2})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1})]),l[22]||(l[22]=h(`<p>我们可以访问<code>https://localhost:3000/api/getData/</code>访问到<code>router.ts</code>中的逻辑：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> GET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://jsonplaceholder.typicode.com/posts/1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Failed to fetch data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在组件中，我们就可以使用<code>fetch</code>来访问这个 API：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetchData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/api/getData</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Error fetching data:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>API Routes 支持常见的 HTTP 方法：<code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> <code>PATCH</code>。只需要通过不同的命名导出即可：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> POST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> received</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-动态-api-routes" tabindex="-1"><a class="header-anchor" href="#_4-2-动态-api-routes"><span>4.2 动态 API Routes</span></a></h3><p>API Routes 同样支持动态路由，且使用方法几乎相同：</p>`,8)),i("div",P,[s(a,{expanded:"",type:"folder",filename:"app",level:0},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-app"})]),default:e(()=>[s(a,{expanded:"",type:"folder",filename:"api",level:1},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:folder-type-api"})]),default:e(()=>[s(a,{expanded:"",type:"folder",filename:"[good_id]",level:2},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:e(()=>[s(a,{type:"file",filename:"route.ts",level:3},{icon:e(()=>[s(n,{provider:"iconify",name:"vscode-icons:file-type-typescript"})]),_:1})]),_:1}),s(a,{type:"file",filename:"...",level:2})]),_:1}),s(a,{type:"file",filename:"...",level:1})]),_:1})]),l[23]||(l[23]=h(`<div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> GET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  req</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }: { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> } }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> userId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-为什么不能在组件中直接-fetch-后端资源" tabindex="-1"><a class="header-anchor" href="#_4-3-为什么不能在组件中直接-fetch-后端资源"><span>4.3 为什么不能在组件中直接 fetch 后端资源？</span></a></h3><p>你当然可以在组件中直接访问后端资源（比如第三方 API），但在以下场景下，建议通过 Next.js 的 API Routes 中转一层。</p><h4 id="_4-3-1-客户端组件运行在浏览器中" tabindex="-1"><a class="header-anchor" href="#_4-3-1-客户端组件运行在浏览器中"><span>4.3.1 客户端组件运行在浏览器中</span></a></h4><p>如果你在客户端组件中写：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://mybackend.com/secret/api</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这段代码会在浏览器中执行，直接暴露真实后端地址，请求也能被抓包看到（如 token、header 等），任何用户都能看到你请求的 URL、参数，甚至访问令牌。</p><h4 id="_4-3-2-服务端资源需要访问数据库、使用密钥、调用本地服务等" tabindex="-1"><a class="header-anchor" href="#_4-3-2-服务端资源需要访问数据库、使用密钥、调用本地服务等"><span>4.3.2 服务端资源需要访问数据库、使用密钥、调用本地服务等</span></a></h4><p>这些行为只能在服务端环境中完成。你不能在客户端组件中执行这些操作。</p><p>你应当这样写：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> GET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> db</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(...)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 数据库操作</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端再调用这个 API 路由：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-tsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/api/data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，真正的资源访问只发生在服务器上，前端访问的是你暴露出来的“网关”。</p><h4 id="_4-3-3-分层架构与复用逻辑" tabindex="-1"><a class="header-anchor" href="#_4-3-3-分层架构与复用逻辑"><span>4.3.3 分层架构与复用逻辑</span></a></h4><p>如果你将所有后端请求逻辑封装到 API Routes，那么客户端与服务端之间通信统一走<code>/api/...</code>，后续你可以在 API 中加入鉴权、中间件、节流等逻辑。再比如你要为多个页面复用同一个数据源，只需要写一个 API route。</p><p>这就是一种常见的后端网关封装模式（Backend for Frontend, BFF）。</p>`,17))])}const w=c(v,[["render",q]]),S=JSON.parse('{"path":"/react/04/","title":"Part 4 Next.js 初体验","lang":"zh-CN","frontmatter":{"title":"Part 4 Next.js 初体验","createTime":"2025/07/08 19:25:14","permalink":"/react/04/","description":"我们注意到 React 官网中更加推荐 Next.js 的方式编写 React 应用。Next.js 的开发体验完全不同于 Vite、Webpack 等静态打包器，独特的路由和服务端渲染机制让其无愧于全栈框架之名。 1 Next.js 项目 1.1 创建一个 Next.js 项目 使用你喜欢的包管理器初始化一个 Next.js 仓库。 按照你的要求选取...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 4 Next.js 初体验\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/react/04/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"Part 4 Next.js 初体验"}],["meta",{"property":"og:description","content":"我们注意到 React 官网中更加推荐 Next.js 的方式编写 React 应用。Next.js 的开发体验完全不同于 Vite、Webpack 等静态打包器，独特的路由和服务端渲染机制让其无愧于全栈框架之名。 1 Next.js 项目 1.1 创建一个 Next.js 项目 使用你喜欢的包管理器初始化一个 Next.js 仓库。 按照你的要求选取..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":6.89,"words":2068},"git":{},"autoDesc":true,"filePathRelative":"repos/react/4. Next.js.md","headers":[]}');export{w as comp,S as data};
