import{_ as l,c as n,a as t,d as s,e as a,b as h,w as d,r as p,o as k}from"./app-BvfsiuvN.js";const r={};function o(c,i){const e=p("VPLink");return k(),n("div",null,[i[4]||(i[4]=t(`<p>我们之前学习过着色器的基本概念。着色器是在 GPU 上执行特定图形处理任务的程序。而 GLSL（OpenGL Shader Language）专门用于编写图形着色器。</p><p>可以在<code>&lt;script&gt;</code>标签中编写 GLSL 代码，并指定类型：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- 顶点着色器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vertex-shader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-shader/x-vertex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- 片元着色器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fragment-shader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-shader/x-fragment</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-glsl-的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-glsl-的数据类型"><span>1 GLSL 的数据类型</span></a></h2><ul><li>基本数据类型：<code>float</code> <code>int</code> <code>bool</code></li><li>浮点数向量类型：<code>vec2</code> <code>vec3</code> <code>vec4</code></li><li>整数向量类型：<code>ivec2</code> <code>ivec3</code> <code>ivec4</code></li><li>布尔向量类型：<code>bvec2</code> <code>bvec3</code> <code>bvec4</code></li><li>矩阵类型：<code>mat2</code> <code>mat3</code> <code>mat4</code></li><li>采样器类型：<code>sampler2D</code> <code>samplerCube</code></li></ul><h2 id="_2-变量修饰符" tabindex="-1"><a class="header-anchor" href="#_2-变量修饰符"><span>2 变量修饰符</span></a></h2><p>用于指定变量的作用域、生命周期和用途。不同的修饰符在顶点着色器和片元着色器中有着不同的作用。</p><ul><li><code>attribute</code>：仅在顶点着色器中使用。定义从顶点缓冲区中传入的变量。</li><li><code>uniform</code>：定义在整个渲染过程中保持不变的变量，如旋转矩阵、光照参数等。</li><li><code>varying</code>：用于在顶点着色器和片元着色器之间传递插值数据。</li></ul><h2 id="_3-内置变量" tabindex="-1"><a class="header-anchor" href="#_3-内置变量"><span>3 内置变量</span></a></h2><p>GLSL 定义了一组内部变量定义顶点和片元的属性。</p><ul><li><code>gl_Position</code>：顶点着色器中的内置变量，定义顶点变换后的位置。</li><li><code>gl_PointSize</code>：顶点着色器中的内置变量，定义点的大小。</li><li><code>gl_FragColor</code>：片元着色器中的内置变量，定义片元的最终颜色。</li></ul><h2 id="_4-内置函数" tabindex="-1"><a class="header-anchor" href="#_4-内置函数"><span>4 内置函数</span></a></h2><p>GLSL 内置了一些常用函数。</p><ul><li>数值函数：<code>sin</code> <code>cos</code> <code>tan</code> <code>pow</code> <code>exp</code> <code>log</code> <code>sqrt</code> <code>abs</code> <code>min</code> <code>max</code> <code>radians</code></li><li>向量函数：<code>dot</code> <code>cross</code> <code>normalize</code> <code>length</code> <code>distance</code></li><li>纹理采样函数：<code>texture2D</code> <code>textureCube</code></li></ul><h2 id="_5-精度修饰符" tabindex="-1"><a class="header-anchor" href="#_5-精度修饰符"><span>5 精度修饰符</span></a></h2><p><code>precesion</code>关键字用来声明浮点型变量的默认精度。</p><ul><li>32 位浮点数：<code>precesion highp float</code></li><li>16 位浮点数：<code>precesion mediump float</code></li><li>10 位浮点数：<code>precesion lowp float</code></li></ul><h2 id="_6-主函数" tabindex="-1"><a class="header-anchor" href="#_6-主函数"><span>6 主函数</span></a></h2><p>着色器必须有一个主函数定义函数入口：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-glsl"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  gl_Position </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> vec4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">aPosition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  gl_PointSize </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如对于下面这个例子：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- 顶点着色器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vertex-shader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-shader/x-vertex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  void main() {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    gl_PointSize = 10.0;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  } </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- 片元着色器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fragment-shader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-shader/x-fragment</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  void main() {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)),s("p",null,[i[1]||(i[1]=s("code",null,"gl_Position",-1)),i[2]||(i[2]=a("定义点的位置在原点处，注意 GLSL 中使用的是",-1)),h(e,{href:"/graphics/p1/#_3-%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87%E4%B8%8E%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2"},{default:d(()=>[...i[0]||(i[0]=[a("齐次坐标",-1)])]),_:1}),i[3]||(i[3]=a("。",-1))]),i[5]||(i[5]=s("p",null,[s("code",null,"gl_PointSize"),a("定义点的大小为 10 像素。")],-1)),i[6]||(i[6]=s("p",null,[s("code",null,"gl_FragColor"),a("定义了点的颜色为 RGBA(1, 0, 0, 1)，即红色。")],-1))])}const y=l(r,[["render",o]]),u=JSON.parse('{"path":"/web3d/webgl/02/","title":"Part 2 着色器 与 GLSL","lang":"zh-CN","frontmatter":{"title":"Part 2 着色器 与 GLSL","createTime":"2025/10/17 08:36:45","permalink":"/web3d/webgl/02/","description":"我们之前学习过着色器的基本概念。着色器是在 GPU 上执行特定图形处理任务的程序。而 GLSL（OpenGL Shader Language）专门用于编写图形着色器。 可以在<script>标签中编写 GLSL 代码，并指定类型： 1 GLSL 的数据类型 基本数据类型：float int bool 浮点数向量类型：vec2 vec3 vec4 整数向...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 2 着色器 与 GLSL\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/web3d/webgl/02/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"Part 2 着色器 与 GLSL"}],["meta",{"property":"og:description","content":"我们之前学习过着色器的基本概念。着色器是在 GPU 上执行特定图形处理任务的程序。而 GLSL（OpenGL Shader Language）专门用于编写图形着色器。 可以在<script>标签中编写 GLSL 代码，并指定类型： 1 GLSL 的数据类型 基本数据类型：float int bool 浮点数向量类型：vec2 vec3 vec4 整数向..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":2.09,"words":627},"git":{},"autoDesc":true,"filePathRelative":"repos/web3d/1.Char.1 WebGL/2.md","headers":[]}');export{y as comp,u as data};
