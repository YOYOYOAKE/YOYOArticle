import{_ as h,c as p,d as a,a as e,b as t,w as l,e as i,r,o as d}from"./app-BvfsiuvN.js";const k={};function o(c,s){const n=r("VPLink");return d(),p("div",null,[s[6]||(s[6]=a("h2",{id:"_1-认识-webgl",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-认识-webgl"},[a("span",null,"1 认识 WebGL")])],-1)),s[7]||(s[7]=a("p",null,"WebGL（Web Graphics Library）是一类 JavaScript API，允许用户和开发者在任何兼容的浏览器中渲染 3D 图形。",-1)),s[8]||(s[8]=a("h3",{id:"_1-1-webgl-坐标系统",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-1-webgl-坐标系统"},[a("span",null,"1.1 WebGL 坐标系统")])],-1)),a("p",null,[s[1]||(s[1]=e('WebGL 的坐标系统是一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \\times 1 \\times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的立方体空间，这与我们在',3)),t(n,{href:"/graphics/p2/#_2-%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2"},{default:l(()=>[...s[0]||(s[0]=[i("投影变换",-1)])]),_:1}),s[2]||(s[2]=e('中学到的一致。其中，向右为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>轴正方向，向上为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>轴正方向，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>轴正方向穿过屏幕向外构成右手系。',7))]),s[9]||(s[9]=a("h3",{id:"_1-2-webgl-渲染管线",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-2-webgl-渲染管线"},[a("span",null,"1.2 WebGL 渲染管线")])],-1)),a("p",null,[s[4]||(s[4]=i("我们在学习图形学时学到过",-1)),t(n,{href:"/graphics/p3/#_3-1-%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%BA%BF"},{default:l(()=>[...s[3]||(s[3]=[i("渲染管线",-1)])]),_:1}),s[5]||(s[5]=i("的知识，它描述了三维场景从顶点坐标到渲染到屏幕上的过程。",-1))]),s[10]||(s[10]=e(`<p>WebGL 渲染管线与其完全一致：</p><div class="vp-steps"><ol><li>顶点处理</li></ol><p>顶点着色器处理每个顶点的数据，将顶点坐标从对象空间转换到裁剪空间。</p><ol start="2"><li>图元装配</li></ol><p>顶点按照规则被组装为点、线段、三角形等图元。</p><ol start="3"><li>光栅化</li></ol><p>图元被转换为片元（Fragments），一个片段对应屏幕上的一个像素。</p><ol start="4"><li>片元处理</li></ol><p>片元着色器确定每个片段的纹理、光照、颜色等属性。</p><ol start="5"><li>逐片元操作</li></ol><p>包括深度测试和模板测试等操作。</p><ol start="6"><li>帧缓冲区</li></ol><p>显示最终的渲染结果到屏幕上</p></div><h2 id="_2-canvas-画布" tabindex="-1"><a class="header-anchor" href="#_2-canvas-画布"><span>2 Canvas 画布</span></a></h2><p>Canvas 画布是 HTML5 提供的一个用于绘制图形的区域。至于绘制的是 2D 和 3D 图形，这取决于渲染上下文对象是 2D 还是 3D。</p><h3 id="_2-1-canvas-的上下文" tabindex="-1"><a class="header-anchor" href="#_2-1-canvas-的上下文"><span>2.1 Canvas 的上下文</span></a></h3><p>我们可以使用<code>HTMLCanvasElement.getContext()</code>方法获取 Canvas 渲染上下文对象。根据传入的参数不同，返回 2D 或 3D 渲染上下文。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ctx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 获取 2D 上下文对象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> gl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">webgl</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 获取 3D 上下文对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-canvas-的画布大小" tabindex="-1"><a class="header-anchor" href="#_2-2-canvas-的画布大小"><span>2.2 Canvas 的画布大小</span></a></h3><p>默认 Canvas 画布大小为 300×150 像素，可以通过更改<code>width</code>和<code>height</code>属性调整画布大小。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">canvas</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">800</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">600</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于<code>&lt;canvas&gt;</code>标签同属 HTML 元素，所以可以使用 CSS 调整大小。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 800</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 600</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，CSS 调整的只是 Canvas 元素在网页上表现出的尺寸，与 Canvas 画布大小无关。如果只使用 CSS 调整元素尺寸，绘制的图形可能会被拉伸或压缩导致失真。</p><h2 id="_3-javascript-类型化数组-typed-array" tabindex="-1"><a class="header-anchor" href="#_3-javascript-类型化数组-typed-array"><span>3 JavaScript 类型化数组 Typed Array</span></a></h2><p>JS 数组为其动态性牺牲了性能。而在图像影音处理等性能倾向的场景中，JS 数组就显得不够用了。因此我们需要使用类型化数组高效存储数据。</p><h3 id="_3-1-认识类型化数组" tabindex="-1"><a class="header-anchor" href="#_3-1-认识类型化数组"><span>3.1 认识类型化数组</span></a></h3><p>JS 数组非常灵活，可以动态调整大小甚至存储任意类型的数据。而类型化数组直接在一个连续的内存块上进行操作，从而高效访问数据。</p><p>类型化数组不继承自<code>Array.prototype</code>，因此它们不具备普通数组的<code>push</code> <code>pop</code> <code>splice</code>等方法。</p><p>类型化数组有以下几种：</p><ul><li><code>Int8Array</code>：8 位有符号整数，每个元素 1 字节</li><li><code>Uint8Array</code>：8 位无符号整数，每个元素 1 字节</li><li><code>Uint8ClampedArray</code>：8 位无符号整数，溢出时值被截断</li><li><code>Int16Array</code>： 16 位有符号整数，每个元素 2 字节</li><li><code>Uint16Array</code>：16 位无符号整数，每个元素 2 字节</li><li><code>Int32Array</code>：32 位有符号整数，每个元素 4 字节</li><li><code>Uint32Array</code>：32 位无符号整数，每个元素 4 字节</li><li><code>Float32Array</code>：32 位 IEEE 754 浮点数，每个元素 4 字节</li><li><code>Float64Array</code>：64 位 IEEE 754 浮点数，每个元素 8 字节</li></ul><h3 id="_3-2-创建和使用类型化数组" tabindex="-1"><a class="header-anchor" href="#_3-2-创建和使用类型化数组"><span>3.2 创建和使用类型化数组</span></a></h3><p>类型化数组需要使用<code>new</code>关键字来声明：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> int8Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Int8Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 创建一个指定长度的结构化数组</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> float32Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Float32Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 使用数组字面量创建结构化数组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>与普通数组一样，类型化数组也支持<code>.forEach()</code> <code>.map()</code> <code>.reduce()</code>等方法。</p><p>你可以在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noopener noreferrer">MDN</a>找到更多用法。</p>`,25))])}const m=h(k,[["render",o]]),y=JSON.parse('{"path":"/web3d/webgl/01/","title":"Part 1 基础内容","lang":"zh-CN","frontmatter":{"title":"Part 1 基础内容","createTime":"2025/10/16 14:13:52","permalink":"/web3d/webgl/01/","description":"1 认识 WebGL WebGL（Web Graphics Library）是一类 JavaScript API，允许用户和开发者在任何兼容的浏览器中渲染 3D 图形。 1.1 WebGL 坐标系统 WebGL 的坐标系统是一个 1×1×1 的立方体空间，这与我们在中学到的一致。其中，向右为x轴正方向，向上为y轴正方向，z轴正方向穿过屏幕向外构成右手系...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 1 基础内容\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.yoake.cc/web3d/webgl/01/"}],["meta",{"property":"og:site_name","content":"YOYOArticle"}],["meta",{"property":"og:title","content":"Part 1 基础内容"}],["meta",{"property":"og:description","content":"1 认识 WebGL WebGL（Web Graphics Library）是一类 JavaScript API，允许用户和开发者在任何兼容的浏览器中渲染 3D 图形。 1.1 WebGL 坐标系统 WebGL 的坐标系统是一个 1×1×1 的立方体空间，这与我们在中学到的一致。其中，向右为x轴正方向，向上为y轴正方向，z轴正方向穿过屏幕向外构成右手系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":3.37,"words":1010},"git":{},"autoDesc":true,"filePathRelative":"repos/web3d/1.Char.1 WebGL/1.md","headers":[]}');export{m as comp,y as data};
